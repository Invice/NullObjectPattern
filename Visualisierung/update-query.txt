MATCH (mainClass:Class)-[:CONTAINS_FIELD]->(candidateField:Field)
MATCH j=((method:Method) -[:CONTROL_FLOW]->(this:Assignment {operation:"thisdeclaration"})-[:CONTROL_FLOW*]->(ifCond:NopStmt {nopkind:"IF_COND"})-[:CONTROL_FLOW]->(tmpCond:Assignment)-[:CONTROL_FLOW]->(condEval:Condition {operation:"!="})-[:CONTROL_FLOW]->(:NopStmt {nopkind:"IF_THEN"})-[:CONTROL_FLOW*]->(candidateCall:Assignment)-[:CONTROL_FLOW*]->(ifEnd:NopStmt {nopkind:"IF_END"})) 
	WHERE (method)-[:CONTAINS_UNIT]->(this)	
		AND (this)-[:DATA_FLOW]->(tmpCond)-[:DATA_FLOW]->(condEval) 
		AND (candidateField)-[:DATA_FLOW ]->(tmpCond) 
		AND (condEval.operand1="null" OR condEval.operand2="null")
MATCH k=((condEval)-[:CONTROL_FLOW]->(:NopStmt {nopkind:"IF_ELSE"})-[:CONTROL_FLOW*]->(ifEnd))
MATCH (package:Package) --> (candidate:Class)
	WHERE candidateField.vartype = candidate.fqn
    WITH collect(DISTINCT candidate) AS candidateList, package, candidate
FOREACH (cand IN candidateList | 
	CREATE (abstractNode:Class {name: 'Abstract'+cand.name})
    CREATE (nullNode:Class {name: 'Null'+cand.name})
    CREATE (realNode:Class {name: 'Real'+cand.name})
    CREATE (package)-[:CONTAINS_TYPE]->(abstractNode)
    CREATE (package)-[:CONTAINS_TYPE]->(nullNode)
    CREATE (package)-[:CONTAINS_TYPE]->(realNode)
	CREATE (nullNode) -[:EXTENDS]-> (abstractNode)
	CREATE (realNode) -[:EXTENDS]-> (abstractNode)
	)	
	
RETURN candidate